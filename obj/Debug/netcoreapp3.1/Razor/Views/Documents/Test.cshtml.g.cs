#pragma checksum "C:\Users\hector\hmvs\wd\todo\TEST\xapp\Views\Documents\Test.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "508a1509239eb72350771f8d6b81a49ceb6df518"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Documents_Test), @"mvc.1.0.razor-page", @"/Views/Documents/Test.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\hector\hmvs\wd\todo\TEST\xapp\Views\_ViewImports.cshtml"
using xapp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\hector\hmvs\wd\todo\TEST\xapp\Views\Documents\Test.cshtml"
using xapp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "{title?}")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"508a1509239eb72350771f8d6b81a49ceb6df518", @"/Views/Documents/Test.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"55e9f0a09f2fc02997132be875fa293c2f0fe432", @"/Views/_ViewImports.cshtml")]
    public class Views_Documents_Test : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral(@"<!-- <!DOCTYPE html>
<html>
  <head> -->
<meta name=""viewport"" content=""width=device-width, initial-scale=1"" />

<!-- </head>
<body> -->


<script>
  MathJax = {
    tex: {
      inlineMath: [['$', '$'], ['\\(', '\\)']]
    }
  };
</script>
<script id=""MathJax-script"" async
        src=""https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"">
</script>


<style>
    nav {
        border-bottom: 1px solid black;
    }

    .crumbs ol {
        list-style-type: none;
        padding-left: 0;
    }

    .crumb {
        display: inline-block;
    }

        .crumb a::after {
            display: inline-block;
            color: #000;
            content: '>';
            font-size: 80%;
            font-weight: bold;
            padding: 0 3px;
        }

    ol {
        padding-left: 1.8em;
    }
</style>

<div style=""left: 5px;width: 125px;position: fixed; top: 65px;margin-left:5px; font-size: 10px; "">
    <h6>Chapters</h6>
    <ol>
        <li><a href=""#ch");
            WriteLiteral(@"apter-1"">Chapter 1</a>
        <li><a href=""#chapter-2"">Chapter 2</a>
        <li><a href=""#chapter-3"">Chapter 3</a>
        <li><a href=""#chapter-3"">Chapter 4</a>
        <li><a href=""#chapter-3"">Chapter 5</a>
    </ol>
</div>


<div class=""ui raised very padded text container segment"" style=""margin-top:5px;"">
    <nav aria-label=""breadcrumb"">
        <ol class=""breadcrumb"">
            <li class=""breadcrumb-item""><a href=""#"">Home</a></li>
            <li class=""breadcrumb-item""><a href=""#"">Library</a></li>
            <li class=""breadcrumb-item active"" aria-current=""page"">Data</li>
        </ol>
    </nav>



    <h1>Some Fresh Title</h1>
    <p>This is where some content would go.</p>

    When \(a \ne 0\), there are two solutions to \(ax^2 + bx + c = 0\) and they are
    $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$


    <h2>Some Fresh Title</h2>
    Bona fide: In good faith
    This adjective originally described someone bargaining or working in good faith, meaning they could be");
            WriteLiteral(@" trusted. Today it's used to describe anything real or authentic, as in “this painting is a bona fide Picasso.”
    Carpe diem: Seize the day
    This philosophy was originally coined by the Roman poet Horace to encourage people to live life to the fullest. The original YOLO (you only live once), it was later made popular in England by 17th century poet Robert Herrick

    Bona fide: In good faith
    This adjective originally described someone bargaining or working in good faith, meaning they could be trusted. Today it's used to describe anything real or authentic, as in “this painting is a bona fide Picasso.”
    Carpe diem: Seize the day
    This philosophy was originally coined by the Roman poet Horace to encourage people to live life to the fullest. The original YOLO (you only live once), it was later made popular in England by 17th century poet Robert Herrick
    <h2>Some Fresh Title</h2>

    Bona fide: In good faith
    This adjective originally described someone bargaining or working in go");
            WriteLiteral(@"od faith, meaning they could be trusted. Today it's used to describe anything real or authentic, as in “this painting is a bona fide Picasso.”
    Carpe diem: Seize the day
    This philosophy was originally coined by the Roman poet Horace to encourage people to live life to the fullest. The original YOLO (you only live once), it was later made popular in England by 17th century poet Robert Herrick

    <h3>Some Fresh Title</h3>
    Bona fide: In good faith
    This adjective originally described someone bargaining or working in good faith, meaning they could be trusted. Today it's used to describe anything real or authentic, as in “this painting is a bona fide Picasso.”
    Carpe diem: Seize the day
    This philosophy was originally coined by the Roman poet Horace to encourage people to live life to the fullest. The original YOLO (you only live once), it was later made popular in England by 17th century poet Robert Herrick



</div>




</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DocsModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<DocsModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<DocsModel>)PageContext?.ViewData;
        public DocsModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
